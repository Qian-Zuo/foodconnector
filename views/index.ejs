<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Food Connector</title>
    <link rel="stylesheet" type="text/css" href="https://api.tomtom.com/maps-sdk-for-web/cdn/5.x/5.45.0/maps/maps.css">
    <script src="https://api.tomtom.com/maps-sdk-for-web/cdn/5.x/5.45.0/maps/maps-web.min.js"></script>
    <script src="https://api.tomtom.com/maps-sdk-for-web/cdn/5.x/5.45.0/services/services-web.min.js"></script>
    <style>
        body {
            margin: 0;
        }

        #map {
            height: 100vh;
            width: 100vw;
        }

        .tt-form-label {
            position: fixed;
            z-index: 1;
        }
        h1 {
            color: green;
        }
    </style>
</head>

<body>
    <h1><%= total %> </h1>
    <h1>Food Connector</h1>
    <div id="map">
    </div>
    <script>
        var map = tt.map({
            key: 'rOGLzemQ7stZHZsHazIIWuC8j9aiNAdk',
            container: 'map',
            center: [-0.128666, 51.505814],
            style: 'tomtom://vector/1/basic-main',
            zoom: 10
        });
        map.addControl(new tt.FullscreenControl());
        map.addControl(new tt.NavigationControl());

        var markersOnTheMap = {};
        var eventListenersAdded = false;

        var points = [
        <% for( let index = 0; index < total; index++ ) { %>
            {
                coordinates: [-0.13389631465156526, <%= latitudes[index] %>],
                properties: {
                    id: <%= latitudes[index] %>,
                    name: 'Checkpoint A'
                }
            },
    <% } %>
        ];

        var geoJson = {
            type: 'FeatureCollection',
            features: points.map(function(point) {
                return {
                    type: 'Feature',
                    geometry: {
                        type: 'Point',
                        coordinates: point.coordinates
                    },
                    properties: point.properties
                };
            })
        };

        function refreshMarkers() {
            Object.keys(markersOnTheMap).forEach(function(id) {
                markersOnTheMap[id].remove();
                delete markersOnTheMap[id];
            });

            map.querySourceFeatures('point-source').forEach(function(feature) {
                if (feature.properties && !feature.properties.cluster) {
                    var id = parseInt(feature.properties.id, 10);
                    if (!markersOnTheMap[id]) {
                        var newMarker = new tt.Marker().setLngLat(feature.geometry.coordinates);
                        newMarker.addTo(map);
                        newMarker.setPopup(new tt.Popup({offset: 30}).setText(feature.properties.name));
                        markersOnTheMap[id] = newMarker;
                    }
                }
            });
        }

        map.on('load', function() {
            map.addSource('point-source', {
                type: 'geojson',
                data: geoJson,
                cluster: true,
                clusterMaxZoom: 14,
                clusterRadius: 50
            });

            map.addLayer({
                id: 'clusters',
                type: 'circle',
                source: 'point-source',
                filter: ['has', 'point_count'],
                paint: {
                    'circle-color': [
                        'step',
                        ['get', 'point_count'],
                        '#EC619F',
                        4,
                        '#008D8D',
                        7,
                        '#004B7F'
                    ],
                    'circle-radius': [
                        'step',
                        ['get', 'point_count'],
                        15,
                        4,
                        20,
                        7,
                        25
                    ],
                    'circle-stroke-width': 1,
                    'circle-stroke-color': 'white',
                    'circle-stroke-opacity': 1
                }
            });

            map.addLayer({
                id: 'cluster-count',
                type: 'symbol',
                source: 'point-source',
                filter: ['has', 'point_count'],
                layout: {
                    'text-field': '{point_count_abbreviated}',
                    'text-size': 16
                },
                paint: {
                    'text-color': 'white'
                }
            });

            map.on('data', function(e) {
                if (e.sourceId !== 'point-source' || !map.getSource('point-source').loaded()) return;
                refreshMarkers();

                if (!eventListenersAdded) {
                    map.on('move', refreshMarkers);
                    map.on('moveend', refreshMarkers);
                    eventListenersAdded = true;
                }
            });

            map.on('click', 'clusters', function(e) {
                var features = map.queryRenderedFeatures(e.point, { layers: ['clusters'] });
                var clusterId = features[0].properties.cluster_id;
                map.getSource('point-source').getClusterExpansionZoom(clusterId, function(err, zoom) {
                    if (err) {
                        return;
                    }

                    map.easeTo({
                        center: features[0].geometry.coordinates,
                        zoom: zoom + 0.5
                    });
                });
            });

            map.on('mouseenter', 'clusters', function() {
                map.getCanvas().style.cursor = 'pointer';
            });

            map.on('mouseleave', 'clusters', function() {
                map.getCanvas().style.cursor = '';
            });
        });
    </script>
</body>

</html>